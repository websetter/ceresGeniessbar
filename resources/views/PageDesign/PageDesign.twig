{% import "Ceres::PageDesign.Macros.IncludeComponents" as Loader %}
{% import "Ceres::PageDesign.Macros.LayoutContainer" as LayoutContainer %}
{% import "Ceres::PageDesign.Macros.Translations" as Translations %}
{{ component( "Ceres::PageDesign.Components.Notifications" ) }}
{{ component( "GeniessBar::Basket.Components.BasketPreview" ) }}
{{ component( "Ceres::Customer.Components.Login" ) }}
{{ component( "Ceres::Customer.Components.Registration" ) }}
{{ component( "Ceres::Basket.Components.AddItemToBasketOverlay" ) }}
{{ component( "Ceres::PageDesign.Components.Popper" ) }}
{{ component( "Ceres::Containers.Components.ContainerItemList" ) }}
{{ component( "Ceres::Containers.Components.LastSeenItemList" ) }}
{{ component( "Ceres::Newsletter.Components.NewsletterInput" ) }}
{{ component( "Ceres::Category.Components.CategoryBreadcrumbs" ) }}
{{ component( "Ceres::Customer.Components.ForgotPassword" ) }}
{{ component("Ceres::Customer.Components.Contact.AcceptPrivacyPolicyCheck") }}

{% set currencyFormat = config("Ceres.currency.format") %}
{% set defaultLanguage = services.webstoreConfig.getDefaultLanguage() %}

{% if request.get('openBasketPreview') == 1 %}
    {% set openBasketClass = "open-" ~ ceresConfig.basket.previewType %}
{% endif %}

<!DOCTYPE html>

<html lang="{{ lang }}" data-framework="vue" prefix="og: https://ogp.me/ns#">

<head>
    {% include getPartial('head') %}
    <meta http-equiv="Cache-control" content="no-cache">

    {% block PartialHead %}
    {% endblock %}

    {% for styleTemplate in get_additional_styles() %}
        {% include styleTemplate.path ignore missing with styleTemplate.params %}
    {% endfor %}
</head>

<body class="{{ bodyClasses | join(' ') }}">
<script>
    if('ontouchstart' in document.documentElement)
    {
        document.body.classList.add("touch","{{ lang }}");

    }
    else
    {
        document.body.classList.add("no-touch","{{ lang }}");
    }
</script>
<div id="vue-app"{% if openBasketClass is not empty %} class="{{ openBasketClass }}"{% endif %}>
    <div class="wrapper wrapper-top">
        <!-- messages -->
        <notifications template="#vue-notifications" :initial-notifications="{{ notifications | json_encode() }}"></notifications>
    </div>

    <div class="wrapper wrapper-left">
        <!-- filters -->
    </div>

    <div class="wrapper wrapper-main {% if ceresConfig.header.fixNavBarPos %}isSticky{% endif %}">
        {% include getPartial('header') %}

        <div id="page-body" class="main">
            {% block PageBody %}
                <!-- inject content of inherited templates here -->
            {% endblock %}
        </div>

        {% include getPartial('footer') %}

        {% block PartialFooter %}
        {% endblock %}
    </div>

    {% if basket is not defined %}
        {% set basket = services.basket.getBasketForTemplate() %}
    {% endif %}
    {% if ceresConfig.basket.previewType == "right" %}
        <div class="wrapper wrapper-right">
            <basket-preview :show-net-prices={{ showNetPrices | json_encode }}></basket-preview>
        </div>
    {% endif %}

    <div class="wrapper wrapper-bottom">
        <!-- LOGIN MODAL -->
        <div id="login-modal-wrapper">
            <div class="modal fade login-modal" id="login" tabindex="-1" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <div class="modal-title h3">{{ trans("Ceres::Template.login") }}</div>
                        </div>
                        <login template="#vue-login" modal-element="login-modal-wrapper"></login>
                    </div>
                </div>
            </div>
        </div>
        <!-- ./LOGIN MODAL -->

        <!-- REGISTRATION MODAL -->
        <div id="simple-registration-modal-wrapper">
            <div class="modal fade" id="registration" tabindex="-1" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                            <div class="modal-title h3">
                                {{ trans("Ceres::Template.regCreateAccount") }}

                                <popper v-cloak class="pull-right m-r-1">
                                    <button slot="handle" class="btn btn-icon btn-secondary btn-sm">
                                        <i class="fa fa-info"></i>
                                    </button>
                                    <div slot="title">
                                        {{ trans("Ceres::Template.regContactInformations") }}
                                    </div>
                                    <ul slot="content" class='p-l-1'>
                                        <li class='m-b-1'>{{ trans('Ceres::Template.regContactInfoText1') }}</li>
                                        <li class='m-b-1'>{{ trans('Ceres::Template.regContactInfoText2') }}</li>
                                        <li class='m-b-1'>{{ trans('Ceres::Template.regContactInfoText3') }}</li>
                                        <li>{{ trans('Ceres::Template.regContactInfoText4') }}</li>
                                    </ul>
                                </popper>
                            </div>
                        </div>
                        <registration template="#vue-registration" :is-simple-registration="true" modal-element="simple-registration-modal-wrapper"></registration>
                    </div>
                </div>
            </div>
        </div>
        <!-- ./REGISTRATION MODAL -->

        <!-- BASKET MODAL -->
        <add-item-to-basket-overlay></add-item-to-basket-overlay>
        <!-- ./BASKET MODAL -->

        <!-- PASSWORD RESET MODAL -->
        <forgot-password-modal></forgot-password-modal>
        <!-- ./PASSWORD RESET MODAL -->

        <!-- SHIPPINGCOSTS MODAL -->
          {% if ceresConfig.global.shippingCostsCategoryId > 0 %}
          <div id="shippingscosts-modal-wrapper">
              <div class="modal fade" id="shippingscosts" tabindex="-1" role="dialog">
                  <div class="modal-dialog">
                      <div class="modal-content">
                          <div class="modal-header">
                              <div class="modal-title h3">{{ trans('Ceres::Template.shippingInfoCosts') }}</div>
                              <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                          </div>
                          <div class="modal-body">
                              {% set shopBuilderShippingTemplate = shop_builder_category_template(ceresConfig.global.shippingCostsCategoryId) %}
                              {% if shopBuilderShippingTemplate | trim is not empty %}
                                  {{ shopBuilderShippingTemplate | raw }}
                              {% else %}
                                  {% include category_template(ceresConfig.global.shippingCostsCategoryId, lang, webstoreConfig.webstoreId) ignore missing %}
                              {% endif %}
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          {% endif %}
          <!-- ./SHIPPINGCOSTS MODAL -->
      </div>
</div>

<script>
    App = {
        config: {{ ceresConfig | json_encode | raw }},
        urls: {{ urls | json_encode | raw }},
        activeCurrency: "{{ currencyData[currencyFormat] }}",
        currencyPattern: {{  services.checkout.getCurrencyPattern() | json_encode | raw }},
        isCategoryView: {% if services.template.isCategory() == "1" %}true{% else %}false{% endif %},
        isCheckoutView : {% if services.template.isCheckout() == "1" %}true{% else %}false{% endif %},
        isSearch: {% if services.template.isSearch() == "1" %}true{% else %}false{% endif %},
        templateEvent: "{{ templateEvent }}",
        language: "{{ lang }}",
        defaultLanguage: "{{ defaultLanguage }}",
        decimalSeparator: "{{ config("IO.format.separator_decimal") }}",
        urlTrailingSlash: {{ urls.appendTrailingSlash | json_encode }},
        isShopBuilder: {{ isShopBuilder | default(false) | json_encode }}
    };
</script>

{{ Loader.include_components() }}

{{ LayoutContainer.show("Ceres::Script.Loader") }}

{{ Translations.add( "Ceres", "Template" ) }}
{% if ceresConfig.log.performanceLevel  == 'development' %}
    <script src="{{ plugin_path('Ceres') }}/js/dist/ceres-vendor.js?v={{ buildHash }}"></script>
    <script src="{{ plugin_path('Ceres') }}/js/dist/ceres-app.js?v={{ buildHash }}"></script>
{% else %}
    <script src="{{ plugin_path('Ceres') }}/js/dist/ceres.min.js?v={{ buildHash }}"></script>
{% endif %}

{% for scriptTemplate in get_additional_scripts() %}
    {% include scriptTemplate.path ignore missing with scriptTemplate.params %}
{% endfor %}

{{ LayoutContainer.show("Ceres::Script.AfterScriptsLoaded") }}

{{ get_filtered_tags() }}
{{ get_json_data() }}

<script>
    var rootElement = document.getElementById("vue-app");
    var errorElement = document.getElementById("vue-error");

    Vue.options.delimiters = ['${', '}'];

    var vueEventHub = new Vue();

    var vueApp = new Vue({
        store: window.ceresStore
    });
    vueApp.$mount( rootElement.cloneNode(true) );

    if ( vueApp.$el.id !== "vue-app")
    {
        rootElement.parentNode.removeChild(rootElement);
        errorElement.style.display = "block";
    }
    else
    {
        document.body.replaceChild( vueApp.$el, rootElement );
        errorElement.parentNode.removeChild(errorElement);
    }

    (function($) {
        $(document).on('shopbuilder.after.drop shopbuilder.after.widget_replace', function(event, eventData, widgetElement)
        {
            var compiled = Vue.compile(widgetElement[0].outerHTML );
            var component = new Vue({
                store: window.ceresStore,
                render: compiled.render,
                staticRenderFns: compiled.staticRenderFns
            });
            component.$mount( widgetElement[0] );
            $(component.$el).find('*').each(function(index, elem) {
                $(elem).click(function(event) {
                    event.preventDefault();
                });
            });
        });
    })(jQuery);
</script>

{{ get_shop_builder_scripts() }}
</body>
</html>
